"""State data models for organized collections."""

from __future__ import annotations

from datetime import datetime, timezone
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class FileRecord(BaseModel):
    """Metadata describing a file in an organized collection.

    Attributes:
        path: Relative path to the file within the collection root.
        hash: Optional hash representing the file contents.
        tags: Tags inferred during ingestion.
        categories: Explicit categories associated with the file.
        confidence: Confidence score from classification.
        last_modified: Timestamp for the last modification.
        rename_suggestion: Suggested filename (without extension) generated by classification.
        reasoning: Optional explanation accompanying the classification decision.
    """

    path: str
    hash: Optional[str] = None
    tags: List[str] = Field(default_factory=list)
    categories: List[str] = Field(default_factory=list)
    confidence: Optional[float] = None
    last_modified: Optional[datetime] = None
    rename_suggestion: Optional[str] = None
    reasoning: Optional[str] = None


class CollectionState(BaseModel):
    """Aggregate metadata for an organized directory.

    Attributes:
        root: Absolute path to the tracked directory.
        files: Mapping of relative paths to file records.
        created_at: Timestamp capturing when the collection was first tracked.
        updated_at: Timestamp capturing the latest mutation time.
    """

    root: str
    files: Dict[str, FileRecord] = Field(default_factory=dict)
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))


__all__ = ["FileRecord", "CollectionState"]
